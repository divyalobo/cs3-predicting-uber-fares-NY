import os
import pyarrow.parquet as pq
import pandas as pd

#this method creates a new data frame containing the average base fare, average total fare (sum of base fare, surcharge
# tips, tolls, salestax, and airport fees) for uber and lyft rides in a given month and year
def creating_clean_data(file_path):
  trips = pq.read_pandas(file_path) #reading parquet file
  trips = trips.to_pandas()

  trips = trips[trips['hvfhs_license_num'].isin(['HV0003', 'HV0005'])] #only keeping uber (HV003) and lyft (HV005) data
  trips['hvfhs_license_num'] = trips['hvfhs_license_num'].replace({'HV0003': 'Uber', 'HV0005': 'Lyft'}) #renaming data

# adding total fare column (sum of base fare and additional charges)
  trips['total_fare'] = trips['base_passenger_fare'] + trips['tolls'] + trips['sales_tax'] + trips['congestion_surcharge'] + trips['airport_fee'] + trips['tips']

#finding the average total fare for uber and lyft
  uber_avg_tfare = trips[trips['hvfhs_license_num'] == 'Uber']['total_fare'].mean()
  lyft_avg_tfare = trips[trips['hvfhs_license_num'] == 'Lyft']['total_fare'].mean()

#finding the average base fare for uber and lyft
  uber_avg_bfare = trips[trips['hvfhs_license_num'] == 'Uber']['base_passenger_fare'].mean()
  lyft_avg_bfare = trips[trips['hvfhs_license_num'] == 'Lyft']['base_passenger_fare'].mean()

#storing the month and year of the file
  month = trips['request_datetime'].iloc[0].month
  year= trips['request_datetime'].iloc[0].year

#creating new data frame containing the month, year, and average uber and lyft total fare and base fare for that month
  avg_fares_df = pd.DataFrame({
      'Month': month,
      'Year': year,
      'Average Uber Total Fare': uber_avg_tfare,
      'Average Uber Base Fare': uber_avg_bfare,
      'Average Lyft Total Fare': lyft_avg_tfare,
      'Average Lyft Base Fare': uber_avg_bfare
  })

  return avg_fares_df

#this method process all .parquet files in a directory and creates a new data frame 
# with the creating_clean_data information
def process_directory(directory_path):
  all_avg_fares = pd.DataFrame()  # Initialize an empty DataFrame to store results

  for filename in os.listdir(directory_path):
    if filename.endswith(".parquet"):
      file_path = os.path.join(directory_path, filename)
      try:
        avg_fares_df = creating_clean_data(file_path)
        all_avg_fares = pd.concat([all_avg_fares, avg_fares_df], ignore_index=True)
      except Exception as e:
        print(f"Error processing {filename}: {e}")

  return all_avg_fares

directory= "/content/data"
all_fares_df= process_directory(directory)
all_fares_df.to_csv('all_fares.csv', index=False)
